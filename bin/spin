#!/usr/bin/env bash

# set -o xtrace

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PARENT_DIR=$(dirname "$SCRIPT_DIR")

################################################
# ‚öôÔ∏è FUNCTIONS: Common things that are called
################################################

check_for_upgrade(){
  if is_internet_connected; then
    source $PARENT_DIR/tools/upgrade.sh
  fi
}

is_installed_to_user(){
  if [ -f "$PARENT_DIR/conf/spin.conf" ]; then
    return 0
  else
  	return 1
  fi
}

is_internet_connected() {
  local response
  response=$(curl https://github.com/serversideup/spin/ --write-out %{http_code} --silent --output /dev/null --max-time 1)

  if [ $response -eq 200 ]; then
    return 0
  else
  	return 1
  fi
}

print_version() {

  # Use the local Git repo to show our version
  printf "${BOLD}${YELLOW}Spin Version:${RESET} \n"
  printf "$(git -C $PARENT_DIR describe --tags) "
  
  # Show the track (if installed to the user)
  if is_installed_to_user; then
    source $PARENT_DIR/conf/spin.conf
    printf "[$TRACK] "
    printf "(User Installed)\n"
  else
    printf "(Project Installed)\n"
  fi
}

setup_color() {
  RED=$(printf '\033[31m')
  GREEN=$(printf '\033[32m')
  YELLOW=$(printf '\033[33m')
  BLUE=$(printf '\033[34m')
  BOLD=$(printf '\033[1m')
  RESET=$(printf '\033[m')
}

################################################
# üèé ACTIONS: Commands people can run
################################################
action_debug(){
  
  print_version

    # Show operating system version
  printf "\n${BOLD}${YELLOW}Operating System Version:${RESET} \n"
  case "$(uname -s)" in
      Linux*)     cat /etc/os-release;;
      Darwin*)    sw_vers;;
      *)          echo "This operating system is not supported." && exit 2
  esac
  printf "\n"
  
  # Show docker version
  printf "${BOLD}${BLUE}Docker Info:${RESET} \n"
  printf "$(docker info)\n"
  
}

action_exec(){
  shift 1

  $COMPOSE exec $@ 
}

action_help(){
  echo "help" 
}

action_kill(){
  read -p "üö® You're about to kill all running containers. Are you sure you want to do this? (Y) " -n 1 -r
  echo    # Move to a new line

  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "Cancelling... Nothing with Docker was touched üòÖ"
      exit 1
  fi

  echo "Stopping containers..."
  docker stop $(docker ps -q)
}

action_logs(){
  shift 1

  $COMPOSE logs "$@"
}

action_run(){
  shift 1

  # Run Docker Compose without dependencies. Ensure automations and S6 logging are disabled
  $COMPOSE run --no-deps --rm \
    -e RUN_LARAVEL_AUTOMATIONS=false \
    -e "S6_LOGGING=1" \
    $@
}

action_up(){
  shift 1

  # Check for Internet connection before running a Docker pull
  if is_internet_connected; then
    $COMPOSE pull --ignore-pull-failures
  fi
  # Bring up the containers with `docker-compose`
  $COMPOSE up --remove-orphans "$@" 

}

action_update(){
  if is_installed_to_user; then

    if is_internet_connected; then
      check_for_upgrade
    else
      printf "${BOLD}${RED}ü§î Spin cannot reach Github.com to check for updates.${RESET} "
      printf "Are you sure that you're connected to the Internet?\n"
    fi
    
  else
    printf "${BOLD}${YELLOW}‚ö†Ô∏è Cannot automatically peform an update.${RESET} "
    printf "Your using \"spin\" from the project level. Install updates via NPM or Composer instead.\n"
    exit 1
  fi
}

action_version(){
  print_version
}

################################################
# üöÄ MAIN part of "spin"
################################################
main() {
  ## Set defaults for our environment
  COMPOSE_FILE="dev" #Default the Dev file to be used

  # Set up our structure for our re-used commands
  COMPOSE="docker compose -f docker-compose.yml -f docker-compose.$COMPOSE_FILE.yml"

  # Check that an argument is passed
  if [ $# -gt 0 ]; then
    # Check the first argument and pass the user to proper action, Only some actions need arguments passed.
    case $1 in
      debug)
        action_debug "$@"
      ;;
      exec)
        action_exec "$@"
      ;;
      help)
        action_help
      ;;
      kill)
        action_kill
      ;;
      logs)
        action_logs "$@"
      ;;
      run)
        action_run "$@"
      ;;
      up)
        action_up "$@"
      ;;
      update)
        action_update
      ;;
      version)
        action_version
      ;;
      *)
        echo "\"$1\" is not a valid command. Below are the commands available."
        action_help
      ;;
    esac
  else
    echo "You didn't pass \"spin\" any arguments. Run 'spin help' if you want to see the documentation."
  fi
}

################################################
# Where the script acutally starts
################################################

setup_color
if is_installed_to_user; then
  # Prevent "spin update" from running updates twice
  if [ "$1" != "update" ]; then
    check_for_upgrade
  fi
fi
main "$@" #Passing the original arguments to `main`